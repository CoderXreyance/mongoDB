Explanation :-
    Whenever you're asked a question to write a query, Identify two things from the questions, first what's
    the condition or filter criteria and second thing what fields should we show in output.
    because we have syntax of find() such that
        find({'filter criteria'}, {'fields with the value of 1 or 0'}).

1. Write a mongoDB query to display all the documents in the collection restaurants

    db.restaurants.find({})

2. Write a query to display the fields restaurant_id, name, borough and cuisine for all the documents in the
   collection restaurants.

    db.restaurants.find({}, {
        "restaurant_id" : 1,
        "name" : 1,
        "borough" : 1,
        "cousine" : 1
    })

3.  WAQ to display the fields restaurant_id, name, borough, and zip code, but exclude the field _id for all
    the documents in the collection restaurant.

    db.restaurants.find({},
        {
        "restaurant_id" : 1,
        "name" : 1,
        "borough" : 1,
        "address.zipcode" : 1,
        "_id" : 0
        }
    )

4. WAQ to display the next 5 restaurants names after skipping first 5  which are in the borough bronx.
    
    db.restaurants.find({"borough" : "Bronx"},{"name" : 1}).skip(5).limit(5)
                            OR
    db.restaurants.find({"borough" : "Bronx"},{"name" : 1}).limit(5).skip(5)


5. WAQ to find the restaurants that achieved a score more than 80 but less than 100.

    db.restaurants.find({"grades.score" : { $gt : 80, $lt : 100}})

6. WAQ to find the restaurants that do not prepare any cuisine of "American" and their grade score are more
   than 70 and latitude less than -65.754168.

   db.restaurants.find(
    {
        "cuisine" : {$ne : "American"},
        "grades.score" : {$gt : 70},
        "address.coord.0" : { $lt : -65.7514168}
    }
   )


7. WAQ to find the restaurants which do not prepar any cuisine of "American" and achieved a grade point 'A'
   not belongs to the borough Brooklyn. The documents must be displayed according to the cuisine in descending
   order.

   db.restaurants.find(
    {
        "cuisine" : {$ne : 'American'},
        "grades.grade" : 'A',
        "borough" : {$ne : "Brooklyn"},
    }
   ).sort({"cuisine" : -1})

8. WAQ to find teh restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70
    and located in the longitude less than 65.754168.
    Note : Do this query with using $and operator

  db.restaurants.find({
  $and: [
      { "cuisine" : { $ne: "American" } },
      { "grades.score" : { $gt: 70 } },             
      { "address.coord.1" : { $lt:  65.754168  } } 
    ]
  });

9. WAQ to find the restaurants _id, name , borough and cuisine for those restaurants which contain 'Wil' as
    first three letters for it's name.

    db.restaurants.find(
        { 
            "name" : { $regex : /^Wil/ }
        },
        {
            "restaurant_id" : 1,
            "name" : 1,
            "borough" : 1,
            "cuisine" : 1
        }
        
    )

10. WAQ to find the restaurant id, name, borough and cuisine for those restaurants which contain 'ces' as
    last three letters for it's name

    db.restaurants.find(
        {
            "name" : { $regex : /ces$/}
        },
        {
            "restaurant_id" : 1,
            "name" : 1,
            "borough" : 1,
            "cuisine" : 1
        }
    )


11. WAQ to find the restaurants names for those restaurants which contain 'Reg' as three letters somewhere
    in its name.

    db.restaurants.find(
        { "name" : { $regex : /Reg/}},
        { "name" : 1}
    )

12. WAQ to find the restaurants which belong to the borough bronx and prepared either American or Chinese
    dish.

    db.restaurants.find(
        {
            "borough" : "Bronx",
            "cuisine" : { $in : ['American','Chinese']}
        }
    )


13. WAQ to find the restaurant's names, borough and cuisine for those restaurants which are not belonging
    to the borough Staten Island or Queens or Bronxor, Brooklyn.

    db.restaurants.find(
        {
            "borough" : { $nin : ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}
        },
        {
            "name" : 1,
            "borough" : 1,
            "cuisine" : 1
        }
    )

14. WAQ to find the restaurant_id, name, borough and cuisine for those restaurants which prepared dish except
    American and Chinese or restaurant's name begins with letter 'Wil'.

    db.restaurants.find(
        {
            $or : [
                     {"cuisine" : {$nin : ['American','Chinese']}},
                     {"name" : { $regex : /^Wil/}}
                  ]
        },
        {
            "restaurant_id" : 1,
            "name" : 1,
            "borough" : 1,
            "cuisine" : 1
        }
    )



15. WAQ to find the restaurants names for those restaurants which achieved a grade for 'A' and scored 11 on an 
    ISO date "2014-08-11T00:00:00z" among many of survey dates.

    db.restaurants.find(
        {
            "grades" : {
                $elemMatch : {
                    "date" : ISODate("2014-08-11T00:00:00Z"),
                    "grade" : "A",
                    "score" : 11
                }
            }
        },
        {
            "name" : 1
        }
    )

16. WAQ to arrange the name of the restaurants in descending order along with all the columns, and display
    the names only for top 5 restaurants.

    db.restaurants.find({},{"name" : 1}).sort({"name" : -1}).limit(5)

17. WAQ to arrange the name of the cuisine in ascending order and for that same cuisine borough should be
    in descending order, display name, cuisine, borough and exclude _id field.

    db.restaurants.find({},{"name" : 1,"cuisine" : 1,"borough" : 1, "_id" : 0}).sort({"cuisine" : 1, "borough" : -1})



18. WAQ to know whether all the addresses contains the street or not.

    db.restaurants.find(
        {"address.street" : { $exists : false}}
    )


19. WAQ which select all documents on the restaurants collections where the coord field value is double

    db.restaurants.find(
        { "address.coord" : { $type : "double" }}
    )


20. WAQ to find restaurant names for those restaurants which contains 'mon' as three letters somewhere in its
    name.

    db.restaurants.find(
        {"name" : {$regex : /mon/i}},
        {"name" : 1, "_id" : 0}
    )

NOTE :- here in $regex : /mon/i, we include i which indicates the case-Insensitive for finding mon/Mon/MON.
        Otherwise by default it will search for case sensitive.

21. WAQ to find the restaurants that have at least one grade with a score of less than 5.

    db.restaurants.find(
        {
            "grades" : { $elemMatch : {"score" : { $lt : 5}}}
        }
    )

22. WAQ to find the restaurants that have a grade with a score of 2 and a grade with a score of 6.

    db.restaurants.find(
        {
            "grades" : {
                $elemMatch : { "score" : 2},
                $elemMatch : { "score" : 6}
            }
        }
    )



23. WAQ to find the restaurants names only that have a grade with a score of 2 or a grade with a score of 6.

    db.restaurants.find(
        {
            $or : [
                { "grades" : {$elemMatch : {"score" : 2}}},
                { "grades" : {$elemMatch : {"score" : 6}}}
            ]
        },
        {
            "name" : 1,
            "_id" : 0
        }
    )

 





